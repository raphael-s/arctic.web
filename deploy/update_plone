#!/usr/bin/env python

import json
import os
import re
import shlex
import subprocess
import sys

CHANGED_FILES = []

SITES = []


def update_plone(oldrev, newrev):
    print 'UPDATE PLONE'
    print '${0} -> ${1}'.format(oldrev, newrev)

    CHANGED_FILES.extend(
        run_bg('git diff {0} {1} --name-only'.format(oldrev, newrev))
        .strip().splitlines())

    update_sources()
    print ''
    print ''

    buildout_required = has_changed(r'^.*\.cfg$') or has_changed(r'setup.py')
    templates_changed = has_changed(r'\.pt$')
    print 'buildout required:', bool(buildout_required)
    print 'templates changed:', bool(templates_changed)
    sys.stdout.flush()

    if supervisor_status()['instance0'] != 'STOPPED':
        run_fg('bin/supervisorctl stop instance0')

    assure_maintenance_server_running()

    if templates_changed:
        stop_instances()

    if buildout_required:
        run_buildout()

    run_fg('bin/supervisorctl start instance0')
    if has_proposed_upgrades():
        stop_instances()
        run_upgrades()
        start_instances()
    else:
        restart_instances()
    recook_resources()


def run_bg(cmd, cwd=None):
    if isinstance(cmd, unicode):
       cmd = cmd.encode('ascii','ignore')
    proc = subprocess.Popen(shlex.split(cmd),
                            stdout=subprocess.PIPE,
                            stderr=subprocess.PIPE,
                            cwd=cwd)

    stdout, stderr = proc.communicate()
    if proc.poll():
        print 'ERROR {0}'.format(cmd)
        print stdout
        print stderr
        sys.stdout.flush()
        sys.exit(1)
    return stdout


def run_fg(cmd, abort_on_error=True):
    print ''
    print '>', cmd
    sys.stdout.flush()
    if os.system(cmd):
        if abort_on_error:
            sys.exit(1)
        else:
            return False
    return True


def has_changed(file_regex):
    return filter(re.compile(file_regex).match, CHANGED_FILES)


def update_sources():
    for path in filter(os.path.isdir, map('src/'.__add__, os.listdir('src'))):
        if not os.path.isdir(os.path.join(path, '.git')):
            print ''
            print 'WARNING: not a GIT checkout:', path
            continue
        oldrev = run_bg('git rev-parse HEAD', cwd=path).strip()
        if not run_fg('(cd {0} && git pull)'.format(path), abort_on_error=False):
            continue
        newrev = run_bg('git rev-parse HEAD', cwd=path).strip()
        CHANGED_FILES.extend(
            map((path + os.sep).__add__,
                run_bg('git diff {0} {1} --name-only'.format(oldrev, newrev),
                       cwd=path).strip().splitlines()))
        print path, oldrev, '=>', newrev


def assure_supervisord_running():
    try:
        subprocess.check_call(shlex.split('bin/supervisorctl avail'),
                              stdout=subprocess.PIPE,
                              stderr=subprocess.PIPE)
    except subprocess.CalledProcessError, exc:
        if exc.returncode != 2:
            raise
        run_fg('bin/supervisord')


def assure_maintenance_server_running():
    status = supervisor_status()
    if 'maintenance' in status and status['maintenance'] != 'RUNNING':
        run_fg('bin/supervisorctl start maintenance')


def supervisor_status():
    assure_supervisord_running()
    return dict(map(lambda line: line.split()[:2],
                    run_bg('bin/supervisorctl status').strip().splitlines()))


def instances():
    for name, status in supervisor_status().items():
        if not name.startswith('instance'):
            continue

        yield name, status


def stop_instances():
    names = [name for (name, status) in instances()
             if status != 'STOPPED' and name != 'instance0']
    run_fg('bin/supervisorctl stop {0}'.format(' '.join(names)))


def start_instances():
    names = [name for (name, status) in instances()
             if status != 'RUNNING' and name != 'instance0']
    run_fg('bin/supervisorctl start {0}'.format(' '.join(names)))


def restart_instances():
    for instance_name, status in instances():
        if instance_name == 'instance0':
            continue

        if status != 'STOPPED':
            run_fg('bin/supervisorctl stop {0}'.format(instance_name))
        run_fg('bin/supervisorctl start {0}'.format(instance_name))


def run_buildout():
    run_fg('bin/buildout')


def run_upgrades():
    for site in get_sites():
        run_fg('bin/upgrade install -s %s --proposed' % site['path'])
    return True


def has_proposed_upgrades():
    for site in get_sites():
        command = './bin/upgrade list -s %s --upgrades --json' % site['path']
        data = json.loads(run_bg(command))
        if len(data) > 0:
            print 'Proposed upgrades found.'
            sys.stdout.flush()
            return True

    print 'Proposed upgrades: 0'
    sys.stdout.flush()
    return False


def recook_resources():
    for site in get_sites():
        run_fg('bin/upgrade recook -s %s' % site['path'])


def get_sites():
    if len(SITES) == 0:
        SITES.extend(json.loads(run_bg('./bin/upgrade sites --json')))
        if len(SITES) == 0:
            print "ERROR: No site found."
            sys.exit(1)

        print 'Sites found:', len(SITES)

    return SITES

if __name__ == '__main__':
    update_plone(*sys.argv[1:])
